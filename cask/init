#!/usr/bin/env zsh

here=$(perl -e 'use File::Basename; use Cwd "abs_path"; print dirname(abs_path(@ARGV[0]));' -- "$0")

function print_milestone { { print -nP $'\n%B%F{green}'; print -Rn $1; print -P '%f%b'; } >&2 }
function print_progress { { print -nP $'%F{green}'; print -Rn $1; print -P '%f'; } >&2 }
function print_note { { print -nP $'\n%B'; print -Rn $1; print -P '%b'; } >&2 }
function print_command { { print -nP '%B%F{blue}==> '; print -Rn $1; print -P '%f%b'; } >&2 }
function print_error { { print -nP '%F{red}Error: '; print -Rn $1; print -P '%f'; } >&2 }

errored=false

# abstract away paths
brew=/usr/local/bin/brew
cask_list=$here/casks
postflight=$here/postflight
notes=$here/notes
installed=$here/installed
formula_installed=$here/../brew/installed

# install base system, if not already there
[[ -f $brew ]] || { print_error "/usr/local/bin/brew not found; please install Homebrew first"; exit 1; }
if ! $formula_installed "brew-cask"; then
    print_milestone "Installing Homebrew Cask base system..."
    print_command "brew install brew-cask"
    $brew install brew-cask || { print_error "Failed to install Homebrew Cask base system"; exit 1; }
fi

export HOMEBREW_CASK_OPTS='--appdir=/Applications --verbose'

# casks
print_milestone "Installing casks..."
newly_installed=()
<$cask_list while read -r cask; do
    [[ $cask == \#* ]] && continue # skip comments

    if $installed $cask; then
        print_progress "cask '$cask' already installed"
    else
        print_command "brew cask install $cask"
        $brew cask install $cask || {
            errored=true
            print_error "Failed to install cask '$cask'"
            continue
        }
        newly_installed+=$cask
        print_progress "Running postflight for cask '$cask'..."
        $postflight $cask || errored=true
    fi
done

if [[ -n $newly_installed ]]; then
    print_milestone "Newly installed casks:"
    print -c $newly_installed
fi

# notes
print_note "$(< $notes)"
print_note "Please run 'postflight --all' if the init script was previously interrupted."

[[ $errored == false ]]

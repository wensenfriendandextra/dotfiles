# -*- mode: sh; -*-

# get global env
source ~/.config/env

# history facilities
HISTFILE=${XDG_DATA_HOME:-$HOME/.local/share}/bash/history
HISTSIZE=10000
HISTTIMEFORMAT=%s
PROMPT_COMMAND="history -a; $PROMPT_COMMAND"

# deduplicate PATH
PATH=$(echo -n "$PATH" | awk -v RS=':' -v ORS=':' '!a[$1]++')

# options
shopt -s autocd checkjobs checkwinsize direxpand failglob globstar no_empty_cmd_completion 2>/dev/null

# aliases
alias l='ls -1A --color=auto'
alias path='echo $PATH | tr -s ":" "\n"'

_git_head_position () {
    [[ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" == true ]] || return 1
    local symbolic_ref=$(git symbolic-ref HEAD 2>/dev/null)
    local branch=${symbolic_ref#refs/heads/}
    [[ -n $branch ]] && echo "$branch" && return
    local position="$(git describe --contains --all HEAD 2>/dev/null)"
    [[ -n $position ]] && echo "$position" && return
    local commit="$(git rev-parse HEAD 2>/dev/null)"
    echo "$commit"
}

# prompt
_prompt_command () {
    local last_status="$?"
    local hostseg='\[\e[1m\]\[\e[34m\]${SSH_CONNECTION:+\H }\[\e[0m\]'
    local bashseg='\[\e[35m\]bash-${BASH_VERSINFO[0]}.${BASH_VERSINFO[1]}\[\e[0m\]'
    local timeseg='\[\e[33m\]\t\[\e[0m\]'
    local pathseg='\[\e[36m\][\w]\[\e[0m\]'
    local git_head_position="$(_git_head_position)"
    local gitseg
    [[ -n $git_head_position ]] && gitseg='\[\e[32m\]'"$git_head_position"'\[\e[0m\] ' || gitseg=''
    local jobseg
    (( last_status )) && jobseg='\[\e[31m\]>>>\[\e[0m\]' || jobseg='\[\e[32m\]>>>\[\e[0m\]'
    PS1="$hostseg$bashseg $timeseg $pathseg $gitseg$jobseg"$'\n'
}

# CAUTION:
# _prompt_command *must* be at the beginning of PROMPT_COMMAND, or coloring
# based on prior command exit status won't work.
PROMPT_COMMAND="_prompt_command; $PROMPT_COMMAND"

# z
_Z_CMD=j
_z_data_home=${XDG_DATA_HOME:-$HOME/.local/share}/z
mkdir -p "$_z_data_home"
_Z_DATA=$_z_data_home/index
touch $_Z_DATA
unset _z_data_home
_Z_EXCLUDE_DIRS=(
    /tmp
)
for z in /usr/local/etc/profile.d/z.sh ~/.linuxbrew/etc/profile.d/z.sh /etc/profile.d/z.sh; do
    [[ -f $z ]] && source "$z" && unset z && break
done

:

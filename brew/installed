#!/usr/bin/env zsh

# Return values: See brew_formula_installed_exact (except 0 means installed and
# 1 is not applicable).
brew_formula_installed () {
    local formula prefix
    formula=$1
    prefix=$(brew --prefix $formula 2>/dev/null) || return 3
    [[ ! -d $prefix ]] && return 2 || return 0
}

# Return values:
# 0: installed with the specified options;
# 1: installed but with different options;
# 2: not installed;
# 3: error (e.g. unrecognized formula name).
brew_formula_installed_exact () {
    local -a opts
    local formula prefix receipt
    opts=(${=${@}}) # perform word splitting on all arguments
    formula=$opts[1]
    shift 1 opts

    prefix=$(brew --prefix $formula 2>/dev/null) || return 3
    [[ -d $prefix ]] || return 2
    receipt=$prefix/INSTALL_RECEIPT.json
    [[ -f $receipt ]] || return 3 # keg exists but no receipt found
    actual_opts=( $(jq -r '.used_options[]' <$receipt 2>/dev/null) )

    # compare opts to actual_opts (sort first)
    opts=(${(o)opts})
    actual_opts=(${(o)actual_opts})
    [[ "$opts" == "$actual_opts" ]]
}

[[ $1 == (|-h|--help) ]] && {
    cat >&2 <<EOF
Usage:  installed formula
        installed --exact optstring

If --exact is specified, check if the formula is installed with the exact
options as specified in the optstring (order is ignored). optstring looks like
"mpv --with-bundle --with-vapoursynth" and may be broken into multiple
arguments.

Return values:
    0   installed with the specified options (or installed if no --exact)
    1   installed but with different options (N/A if no --exact)
    2   not installed
    3   error (e.g. unrecognized formula name)

EOF
    exit 3
}

if [[ $1 == --exact ]]; then
    shift
    brew_formula_installed_exact $@
else
    (( $# > 1 )) || {
        print 'Error: Wrong number of arguments.' >&2
        exit 3
    }
    brew_formula_installed $1
fi

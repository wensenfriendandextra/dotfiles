#!/usr/bin/env zsh

here=$(perl -e 'use File::Basename; use Cwd "abs_path"; print dirname(abs_path(@ARGV[0]));' -- "$0")

function print_milestone { { print -nP $'\n%B%F{green}'; print -Rn $1; print -P '%f%b'; } >&2 }
function print_progress { { print -nP $'%F{green}'; print -Rn $1; print -P '%f'; } >&2 }
function print_note { { print -nP $'\n%B'; print -Rn $1; print -P '%b'; } >&2 }
function print_command { { print -nP '%B%F{blue}==> '; print -Rn $1; print -P '%f%b'; } >&2 }
function print_error { { print -nP '%F{red}Error: '; print -Rn $1; print -P '%f'; } >&2 }

errored=false

# install Homebrew base system
if [[ ! -d /usr/local/.git ]]; then
    print_milestone "Installing Homebrew base system..."
    # redirect stdin to /dev/null to perform a noninteractive install
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" </dev/null || {
        print_error "Failed to install Homebrew base system"
        exit 1
    }
fi

# abstract away paths
brew=/usr/local/bin/brew
tap_list=$here/taps
formulae_list=$here/formulae
postflight=$here/postflight
installed=$here/installed
cask_installed=$here/../cask/installed

export HOMEBREW_VERBOSE=true

# taps
print_milestone "Tapping taps..."
tapped_taps=( $($brew tap) )
<$tap_list while read -r tap; do
    # skip comments and tapped taps
    ( [[ $tap == \#* ]] || (( $tapped_taps[(I)$tap] )) ) && { print_progress "Tap '$tap' already tapped"; continue; }
    print_command "brew tap $tap"
    $brew tap $tap || { errored=true; print_error "Failed to tap '$tap'"; }
done

# some formulae depend on X11 and JRE
print_milestone "Installing prelimary dependencies..."
for cask in xquartz java; do
    if ! $cask_installed $cask; then
        print_command "brew cask install $cask"
        $brew cask install $cask || { errored=true; print_error "Failed to install cask $cask"; }
    else
        print_progress "Cask '$cask' already installed"
    fi
done

# formulae
print_milestone "Installing formulae..."
newly_installed=()
<$formulae_list while read -r optstring; do
    # skip comments
    [[ $optstring == \#* ]] && continue

    formula=$optstring[(w)1]
    unset options
    options=$optstring[(w)2,-1]

    # get installed status (0 for installed with right options, 1 for installed
    # with not-quite-right options, 2 for not installed outright)
    $installed --exact $optstring
    case $? in
        0)
            print_progress "Formula '$formula' already installed"
            continue
            ;;
        1)
            print_command "brew uninstall $formula"
            $brew uninstall $formula || {
                errored=true
                print_error "Failed to uninstall formula '$formula' (attempting to reinstall with options '$options')"
                continue
            }
            ;&
        2)
            print_command "brew install $optstring"
            $brew install ${=optstring} || {
                errored=true
                print_error "Failed to install formula '$formula' with options '$options'"
                continue
            }
            newly_installed+=$formula
            ;;
        *)
            print_error "Cannot determine status of formula '$formula'"
            errored=true
            ;;
    esac
done

if [[ -n $newly_installed ]]; then
    print_milestone "Newly installed formulae:"
    print -c $newly_installed

    # postflight
    print_milestone "Running postflight setup..."
    $postflight $newly_installed || errored=true
fi

print_note "Please run 'postflight --all' if the init script was previously interrupted."

[[ $errored == false ]]

#!/usr/bin/env zsh

here=${0:A:h}
source $here/../provision.d/messaging_helpers

errored=false

# install Homebrew base system
if [[ ! -d /usr/local/.git ]]; then
    homebrew_prefix=/usr/local
    homebrew_repo=https://github.com/Homebrew/brew.git
    print_milestone "Installing Homebrew base system..."
    print_command "sudo chown ${USER}:admin $homebrew_prefix"
    sudo chown ${USER}:admin $homebrew_prefix || {
        print_error "Failed to change owner and group of $homebrew_prefix"
        exit 1
    }
    print_progress "Cloning the Homebrew repo into $homebrew_prefix"
    {
        git -C $homebrew_prefix init
        git -C $homebrew_prefix remote add origin $homebrew_repo
        git -C $homebrew_prefix fetch origin
        git -C $homebrew_prefix reset --hard origin/master
    } || {
        print_error "Failed to clone the Homebrew repo into $homebrew_prefix"
        exit 1
    }
fi

# abstract away paths
brew=/usr/local/bin/brew
tap_list=$here/taps
formulae_list=$here/formulae
postflight=$here/postflight
installed=$here/installed
cask_installed=$here/../cask/installed

export HOMEBREW_VERBOSE=true

# update first
print_milestone "Updating base system..."
$brew update || { errored=true; print_error "'brew update' failed"; }

# taps
print_milestone "Tapping taps..."
tapped_taps=( $($brew tap) )
<$tap_list while read -r tap; do
    # skip comments and tapped taps
    ( [[ $tap == \#* ]] || (( $tapped_taps[(I)$tap] )) ) && { print_progress "Tap '$tap' already tapped"; continue; }
    print_command "brew tap $tap"
    $brew tap $tap || { errored=true; print_error "Failed to tap '$tap'"; }
done

# some formulae depend on X11 and JRE, and ./installed depends on jq
print_milestone "Installing preliminary dependencies..."
for formula in jq; do
    if [[ ! -f /usr/local/opt/$formula/INSTALL_RECEIPT.json ]]; then
        print_command "brew install $formula"
        $brew install $formula || { errored=true; print_error "Failed to install formula $formula"; }
    else
        print_progress "Formula '$formula' already installed"
    fi
done
for cask in xquartz java; do
    if ! $cask_installed $cask; then
        print_command "brew cask install $cask"
        $brew cask install $cask || { errored=true; print_error "Failed to install cask $cask"; }
    else
        print_progress "Cask '$cask' already installed"
    fi
done

# formulae
print_milestone "Installing formulae..."
newly_installed=()
<$formulae_list while read -r optstring; do
    # skip comments
    [[ $optstring == \#* ]] && continue

    formula=$optstring[(w)1]
    unset options
    options=$optstring[(w)2,-1]

    # get installed status (0 for installed with right options, 1 for installed
    # with not-quite-right options, 2 for not installed outright)
    $installed --exact $optstring
    case $? in
        0)
            print_progress "Formula '$formula' already installed"
            continue
            ;;
        1)
            print_command "brew uninstall $formula"
            $brew uninstall $formula || {
                errored=true
                print_error "Failed to uninstall formula '$formula' (attempting to reinstall with options '$options')"
                continue
            }
            ;&
        2)
            print_command "brew install $optstring"
            $brew install ${=optstring} || {
                errored=true
                print_error "Failed to install formula '$formula' with options '$options'"
                continue
            }
            print_progress "Running postflight for formula '$formula'..."
            $postflight $formula || errored=true
            newly_installed+=$formula
            ;;
        *)
            print_error "Cannot determine status of formula '$formula'"
            errored=true
            ;;
    esac
done

if [[ -n $newly_installed ]]; then
    print_milestone "Newly installed formulae:"
    print -c $newly_installed
fi

print_note "Please run 'postflight --all' if the init script was previously interrupted."

[[ $errored == false ]]

#!/usr/bin/env zsh

here=$(perl -e 'use File::Basename; use Cwd "abs_path"; print dirname(abs_path(@ARGV[0]));' -- "$0")

function print_progress { { print -nP $'%F{green}'; print -n $1; print -P '%f'; } >&2 }
function print_command { { print -nP '%B%F{blue}==> '; print -n $1; print -P '%f%b'; } >&2 }
function print_error { { print -nP '%F{red}Error: '; print -n $1; print -P '%f'; } >&2 }

# process arguments
all=0
case $1 in
    -h|--help)
        print 'Usage:

    postflight -h|--help
    postflight -a|--all
    postflight formula...

In the first form, print this help and exit with 1.

In the second form, run postflight for all formulae that require special
treatment.

In the third form, run postflight for selected formulae (when available).
'
        ;;
    -a|--all)
        all=1
        ;;
    *)
        newly_installed=($@)
        ;;
esac

# abstract away paths
brew=/usr/local/bin/brew
installed=$here/installed

# run postflight for a formula if --all is specified and the formula is installed,
# or if the formula is one of the formulae specified on the command line
function should_run_postflight_for { (( $all )) && $installed $1 || (( $newly_installed[(I)$1] )); }

errored=false

# link apps
for formula in emacs mpv terminal-notifier; do
    should_run_postflight_for $formula || continue
    print_command "brew linkapps $formula"
    $brew linkapps $formula || { print_error "Failed to link apps for formula '$formula'"; errored=true; }
done

# key-only
if [[ ! -d ~/dev/bin ]]; then
    print_command "mkdir -p ~/dev/bin"
    mkdir -p ~/dev/bin
fi
for formula in curl gnu-getopt; do
    should_run_postflight_for $formula || continue
    keg_bin="$(brew --prefix $formula)/bin"
    print_command "ln -sf $keg_bin/* ~/dev/bin"
    ln -sf $keg_bin/* ~/dev/bin || { print_error "Failed to link binaries for formula '$formula' to ~/dev/bin"; errored=true; }
done

# permissions
if should_run_postflight_for htop-osx; then
    htop="$(brew --prefix htop-osx)/bin/htop"
    print_command "sudo chown root:wheel '$htop'"
    sudo chown root:wheel $htop || errored=true
    print_command "sudo chmod u+s '$htop'"
    sudo chmod u+s $htop || errored=true
fi

if should_run_postflight_for mutt; then
    mutt="$(brew --prefix mutt)/bin/mutt"
    print_command "sudo chown root:mail '$mutt'"
    sudo chown root:mail $mutt || errored=true
    print_command "sudo chmod u+s '$mutt'"
    sudo chmod u+s $mutt || errored=true
fi

# change login shell to /usr/local/bin/zsh
if should_run_postflight_for zsh; then
    # detect user login shell
    whoami=$(whoami)
    myloginshell="$(dscl . -read /Users/$whoami UserShell | sed 's/^UserShell: //')"
    if [[ -e /usr/local/bin/zsh && $myloginshell != /usr/local/bin/zsh ]]; then
        print_progress "Changing login shell to /usr/local/bin/zsh"
        # authorize
        if ! grep -q -E '^/usr/local/bin/zsh' /etc/shells; then
            print_command 'sudo /bin/sh -c "echo /usr/local/bin/zsh >>/etc/shells"'
            sudo /bin/sh -c "echo /usr/local/bin/zsh >>/etc/shells" || {
                print_error "Failed to add /usr/local/bin/zsh to /etc/shells"
                errored=true
            }
        fi
        # change shell
        print_command "sudo chsh -s /usr/local/bin/zsh $whoami"
        sudo chsh -s /usr/local/bin/zsh $whoami || {
            print_error "Failed to change shell to /usr/local/bin/zsh"
            errored=true
        }
    fi
fi

[[ $errored == false ]]

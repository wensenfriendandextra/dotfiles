#!/bin/zsh

# This script provisions an empty OS X install.
#
# This script assumes Xcode (/Applications/Xcode.app or
# /Applications/Xcode-beta.app, the latter takes precedence) and corresponding
# CLT.
#
# This script is nondestructive, that is to say, even if you are not
# provisioning a new machine (say Homebrew is already installed), your machine
# won't explode. You'll get a few error messages at most.

here=${0:A:h}
provisioner_dir=$here/provision.d

source $here/env # source env just to be sure
source $provisioner_dir/messaging_helpers

errored=false

[[ $OSTYPE == *darwin* ]] || {
    print_error "UNRECGONIZED OSTYPE $OSTYPE. THIS PROVISIONER ONLY WORKS ON OS X."
    exit 1
}

# argument processing
skipped_provisioners=()
while [[ $1 == -* ]]; do
    case $1 in
        -h|--help)
            cat >&2 <<EOF
Usage: ${0:t} [OPTIONS]

Options:
    -h, --help
        Print this help and exit.
    --no-PROVISIONER
        Skip provisioner PROVISIONER. PROVISIONER should be one of the names
        under provision.d, e.g., cask.
    --private
        Run provisioners that require access to private repositories of
        @zmwangx, e.g., scripts. Not recommended for anyone other than
        @zmwangx.
EOF
            exit 1
            ;;
        --no-*)
            skipped_provisioners+=${1#--no-}
            ;;
        --private)
            private=1
            ;;
    esac
    shift
done

# Our provisioner requires sudo here and there, so we temporarily modify
# /etc/sudoers so that the timestamp does not expire. Remember to revert
# /etc/sudoers after we are done!
print_warning '

We are going to modify /etc/sudoers to avoid having to type admin password to
sudo during provision. The original /etc/sudoers will be backed up to
/etc/sudoers.bak. It will be restored at the end of provision.

We try to restore /etc/sudoers under most conditions, but if the script is
killed, please run

    sudo mv -f /etc/sudoers.bak /etc/sudoers'

print_milestone "Modifying /etc/sudoers..."
print_command "sudo -v"
sudo -v
print_command "sudo cp -f /etc/sudoers /etc/sudoers.bak"
sudo cp -f /etc/sudoers /etc/sudoers.bak || { print_error "Failed to back up /etc/sudoers"; exit 1; }
print_command "sudo /bin/sh -c \"echo '%admin  ALL=(ALL) NOPASSWD:ALL' >>/etc/sudoers\""
sudo /bin/sh -c "echo '%admin  ALL=(ALL) NOPASSWD:ALL' >>/etc/sudoers" || { print_error "Failed to write to /etc/sudoers to enable nopassword sudo"; exit 1; }

# set up traps for restoration of /etc/sudoers

# restore_sudoers takes 1 positional argument, which is the signal name
# (without SIG prefix)
restore_sudoers_and_exit () {
    [[ $1 != EXIT ]] && print_error "SIG$1 received."
    print_milestone "Restoring /etc/sudoers..."
    print_command "sudo mv -f /etc/sudoers.bak /etc/sudoers"
    sudo mv -f /etc/sudoers.bak /etc/sudoers || print_error "Failed to restore /etc/sudoers from /etc/sudoers.bak"
    if [[ $1 == EXIT ]]; then
        print_note $'Provision success.\nPlease reload your shell.'
    else
        print_progress "Aborting..."
        exit 1
    fi
}

# set_up_traps sets up traps for HUP, INT, TERM and STOP to run
# restore_sudoers_and_exit with the respective signal name.
set_up_traps () {
    for sig in HUP INT TERM STOP; do
        trap "restore_sudoers_and_exit $sig" $sig
    done
}

set_up_traps
# set up trap for EXIT separately because if we trap inside set_up_traps, then
# the trap would be triggered upon exit of set_up_traps
trap 'restore_sudoers_and_exit EXIT' EXIT

# select Xcode
print_milestone "Selecting Xcode..."
xcode_path="$(xcode-select --print-path)"
if [[ $xcode_path =~ /Applications/Xcode(-beta)?.app/Contents/Developer ]]; then
    print_progress "Xcode already selected: $xcode_path"
elif [[ -d /Applications/Xcode-beta.app ]]; then
    print_command "sudo xcode-select --switch /Applications/Xcode-beta.app/Contents/Developer"
    sudo xcode-select --switch /Applications/Xcode-beta.app/Contents/Developer
elif [[ -d /Applications/Xcode.app ]]; then
    print_command "sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer"
    sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
fi

# Provisioner executor.
#
# Usage:
#
#     run_provisioner PROVISIONER MESSAGE [ATTRS]
#
# PROVISIONER is a name under $provisioner_dir, MESSAGE is a milestone message,
# ATTRS are special attributes associated to the provisioner.
#
# When an attribute ATTR is in the list of attributes, the provisioner is only
# executed if the --ATTR flag is present (which leads to the variable named
# ATTR being set to 1 during argument processing).
#
# Currently the only attribute is 'private'.
#
# This function also takes into account the --no-PROVISIONER flags (such
# provisioners are saved in the array skipped_provisioners during argument
# processing).
run_provisioner () {
    provisioner=$1
    message=$2
    shift 2
    # check if this provisioner should be skipped
    [[ -z $skipped_provisioners[(r)$provisioner] ]] || return 0;
    # check if all attributes are met
    for attr; do
        (( ${(P)attr} )) || return 0;
    done
    print_milestone $message
    $provisioner_dir/$provisioner || errored=true
}

run_provisioner zshglobalinit "Inspecting Zsh global init files..."
run_provisioner dotfiles "Setting up dotfiles..."
run_provisioner brew "Provisioning Homebrew..."
run_provisioner scripts "Installing personal scripts..." private
run_provisioner cask "Provisioning Homebrew Cask..."
run_provisioner emacs "Installing Emacs packages..."
run_provisioner python "Setting up Python development environment..."
run_provisioner rvm "Setting up RVM..."
run_provisioner gem "Installing gems..."
run_provisioner cron "Setting up cron schedule..." private
run_provisioner misc "Final touches (miscellaneous)..."

[[ $errored == false ]]

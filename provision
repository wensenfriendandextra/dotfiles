#!/bin/zsh

# This script provisions an empty OS X install.
#
# This script assumes Xcode (/Applications/Xcode.app or
# /Applications/Xcode-beta.app, the latter takes precedence) and corresponding
# CLT.
#
# This script is nondestructive, that is to say, even if you are not
# provisioning a new machine (say Homebrew is already installed), your machine
# won't explode. You'll get a few error messages at most.

[[ $OSTYPE == *darwin* ]] || {
    echo "${BOLD}${RED}ERROR: UNRECGONIZED OSTYPE $OSTYPE. THIS PROVISIONER ONLY WORKS ON OS X.${RESET}" >&2
    exit 1
}

# Our provisioner requires sudo here and there, so we temporarily modify
# /etc/sudoers so that the timestamp does not expire. Remember to revert
# /etc/sudoers after we are done!
print -P '%B%F{yellow}WARNING:

We are going to modify /etc/sudoers to avoid having to type admin password to
sudo during provision. The original /etc/sudoers will be backed up to
/etc/sudoers.bak. It will be restored at the end of provision.

If something went wrong and the provision script exited early, please remember
to restore /etc/sudoers.
%f%b'

setopt xtrace
sudo cp -f /etc/sudoers /etc/sudoers.bak || exit 1
sudo /bin/sh -c "echo '%admin  ALL=(ALL) NOPASSWD:ALL' >>/etc/sudoers" || exit 1
if [[ $(xcode-select --print-path) =~ /Applications/Xcode(-beta)?.app/Contents/Developer ]]; then
    # already selected a valid path; pass
    true
elif [[ -d /Applications/Xcode-beta.app ]]; then
    sudo xcode-select --switch /Applications/Xcode-beta.app/Contents/Developer
elif [[ -d /Applications/Xcode.app ]]; then
    sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
fi
unsetopt xtrace

# detect OS X version
osx_version=$(sw_vers -productVersion)
print -P "%B%F{green}
OS X $osx_version detected
%f%b"
osx_major_version=$osx_version[(ws:.:)1]
osx_minor_version=$osx_version[(ws:.:)2]
osx_patch_version=$osx_version[(ws:.:)3]

# If OS X 10.11+, move default /etc/zprofile to /etc/zshenv, which contains
# path initialization with path_helper.
if (( osx_major_version > 10 || ( osx_major_version == 10 && osx_minor_version >= 11 ) )); then
    if [[ -e /etc/zprofile && ! -e /etc/zshenv ]]; then
        print -P '%B%F{green}
Moving /etc/zprofile to /etc/zshenv...
%f%b'
        sudo mv /etc/zprofile /etc/zshenv || {
            print -P '%F{red}error: failed to move /etc/zprofile to /etc/zshenv'
            errored=true
        }
    fi
fi

errored=false

print -P '%B%F{green}
Setting up basic environment...
%f%b'
~/.config/setup || errored=true

if [[ ! -d ~/dev/scripts ]]; then
    mkdir -p ~/dev/scripts
    print -P '%B%F{green}
Checking out helper tools...
%f%b'
    setopt xtrace
    git clone --recursive git@gitlab.com:zmwangx/scripts.git ~/dev/scripts || errored=true
    unsetopt xtrace
fi

print -P '%B%F{green}
Installing Homebrew and formulae...
%f%b'
~/.config/brew/init

# detect user login shell
whoami=$(whoami)
myloginshell="$(dscl . -read /Users/$whoami UserShell | sed 's/^UserShell: //')"
if [[ -e /usr/local/bin/zsh && $myloginshell != /usr/local/bin/zsh ]]; then
    print -P '%B%F{green}
Changing login shell to /usr/local/bin/zsh...
%f%b'
    grep -q -E '^/usr/local/bin/zsh' /etc/shells || {
        setopt xtrace
        sudo /bin/sh -c "echo /usr/local/bin/zsh >>/etc/shells" || errored=true
        unsetopt xtrace
    }
    setopt xtrace
    sudo chsh -s /usr/local/bin/zsh $whoami
    unsetopt xtrace
fi

print -P '%B%F{green}
Installing casks...
%f%b'
~/.config/cask/init

setopt xtrace
sudo mv -f /etc/sudoers.bak /etc/sudoers
unsetopt xtrace
print -P '%B%F{green}
/etc/sudoers restored.
%f%b'

print -P '%B%F{green}
Installing Emacs packages...
%f%b'
setopt xtrace
/usr/local/bin/emacs --batch -l ~/.emacs.d/init.el
unsetopt xtrace

print -P '%B%F{green}
Provision success.
Please reload your shell.
%f%b'

[[ $errored == false ]]
